// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Przychodnia.Data;

#nullable disable

namespace Przychodnia.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230604080740_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Przychodnia.Models.Lek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Refundacja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Leki");
                });

            modelBuilder.Entity("Przychodnia.Models.LekRecepta", b =>
                {
                    b.Property<int>("LekId")
                        .HasColumnType("int");

                    b.Property<int>("ReceptaId")
                        .HasColumnType("int");

                    b.HasKey("LekId", "ReceptaId");

                    b.HasIndex("ReceptaId");

                    b.ToTable("LekiRecepty");
                });

            modelBuilder.Entity("Przychodnia.Models.Lekarz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("KosztWizyty")
                        .HasColumnType("int");

                    b.Property<string>("Specjalizacja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UzytkownikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UzytkownikId");

                    b.ToTable("Lekarze");
                });

            modelBuilder.Entity("Przychodnia.Models.Pacjent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alergie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KodPocztowy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrzyjmowaneLeki")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UzytkownikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UzytkownikId");

                    b.ToTable("Pacjenci");
                });

            modelBuilder.Entity("Przychodnia.Models.Recepta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataWystawienia")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dawkowanie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KodRecepty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PacjentId")
                        .HasColumnType("int");

                    b.Property<string>("Wystawiajacy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zalecenia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PacjentId");

                    b.ToTable("Recepty");
                });

            modelBuilder.Entity("Przychodnia.Models.Termin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("LekarzId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LekarzId");

                    b.ToTable("Terminy");
                });

            modelBuilder.Entity("Przychodnia.Models.Uzytkownik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Rodzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Uzytkownicy");
                });

            modelBuilder.Entity("Przychodnia.Models.Wizyta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PacjentId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TerminId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PacjentId");

                    b.HasIndex("TerminId");

                    b.ToTable("Wizyty");
                });

            modelBuilder.Entity("Przychodnia.Models.LekRecepta", b =>
                {
                    b.HasOne("Przychodnia.Models.Lek", "Lek")
                        .WithMany("LekiRecepty")
                        .HasForeignKey("LekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przychodnia.Models.Recepta", "Recepta")
                        .WithMany("LekiRecepty")
                        .HasForeignKey("ReceptaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lek");

                    b.Navigation("Recepta");
                });

            modelBuilder.Entity("Przychodnia.Models.Lekarz", b =>
                {
                    b.HasOne("Przychodnia.Models.Uzytkownik", "Uzytkownik")
                        .WithMany()
                        .HasForeignKey("UzytkownikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uzytkownik");
                });

            modelBuilder.Entity("Przychodnia.Models.Pacjent", b =>
                {
                    b.HasOne("Przychodnia.Models.Uzytkownik", "Uzytkownik")
                        .WithMany()
                        .HasForeignKey("UzytkownikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uzytkownik");
                });

            modelBuilder.Entity("Przychodnia.Models.Recepta", b =>
                {
                    b.HasOne("Przychodnia.Models.Pacjent", "Pacjent")
                        .WithMany("Receptas")
                        .HasForeignKey("PacjentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pacjent");
                });

            modelBuilder.Entity("Przychodnia.Models.Termin", b =>
                {
                    b.HasOne("Przychodnia.Models.Lekarz", "Lekarz")
                        .WithMany("Terminy")
                        .HasForeignKey("LekarzId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lekarz");
                });

            modelBuilder.Entity("Przychodnia.Models.Wizyta", b =>
                {
                    b.HasOne("Przychodnia.Models.Pacjent", "Pacjent")
                        .WithMany("Wizytas")
                        .HasForeignKey("PacjentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przychodnia.Models.Termin", "Termin")
                        .WithMany()
                        .HasForeignKey("TerminId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pacjent");

                    b.Navigation("Termin");
                });

            modelBuilder.Entity("Przychodnia.Models.Lek", b =>
                {
                    b.Navigation("LekiRecepty");
                });

            modelBuilder.Entity("Przychodnia.Models.Lekarz", b =>
                {
                    b.Navigation("Terminy");
                });

            modelBuilder.Entity("Przychodnia.Models.Pacjent", b =>
                {
                    b.Navigation("Receptas");

                    b.Navigation("Wizytas");
                });

            modelBuilder.Entity("Przychodnia.Models.Recepta", b =>
                {
                    b.Navigation("LekiRecepty");
                });
#pragma warning restore 612, 618
        }
    }
}
